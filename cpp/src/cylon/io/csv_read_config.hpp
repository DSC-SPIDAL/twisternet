/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef CYLON_SRC_CYLON_IO_CSV_READ_CONFIG_HPP_
#define CYLON_SRC_CYLON_IO_CSV_READ_CONFIG_HPP_

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include <cylon/data_types.hpp>

namespace cylon {
namespace io {
namespace config {
class CSVReadOptions {
 private:
  std::shared_ptr<void> holder;
  bool concurrent_file_reads = true;
  bool slice = false;

 public:
  CSVReadOptions();

  /*cylon specific options*/

  CSVReadOptions ConcurrentFileReads(bool concurrent_file_reads);
  bool IsConcurrentFileReads() const;

  /**
   * If true, the table will be sliced based on the worker index.
   */
  CSVReadOptions Slice(bool slice);
  bool IsSlice() const;

  /*End of cylon specific options*/

  /**
   * Whether to use the global CPU thread pool for reading.
   * Default is true
   */
  CSVReadOptions UseThreads(bool use_threads);

  /**
   * Change the default delimiter(",")
   * @param delimiter character representing the delimiter
   */
  CSVReadOptions WithDelimiter(char delimiter);

  /**
   * Ignore empty lines if any encountered while parsing
   */
  CSVReadOptions IgnoreEmptyLines();

  /**
   * Column names will be autogenerated and first row will
   * not be considered as the header row
   */
  CSVReadOptions AutoGenerateColumnNames();

  CSVReadOptions ColumnNames(const std::vector<std::string> &column_names);

  CSVReadOptions BlockSize(int32_t block_size);

  /**
   * Whether quoting is used
   */
  CSVReadOptions UseQuoting();

  /**
   * Quoting character (if `quoting` is true)
   */
  CSVReadOptions WithQuoteChar(char quote_char);

  /**
   * Whether a quote inside a value is double-quoted
   */
  CSVReadOptions DoubleQuote();

  /**
   * Whether escaping is used
   */
  CSVReadOptions UseEscaping();

  /**
   * Escaping character (if `escaping` is true)
   */
  CSVReadOptions EscapingCharacter(char escaping_char);

  /**
   * Whether values are allowed to contain CR (0x0d) and LF (0x0a) characters
   */
  CSVReadOptions HasNewLinesInValues();

  /**
   * Number of header rows to skip (not including the row of column names, if any)
   * @param skip_rows no of rows
   */
  CSVReadOptions SkipRows(int32_t skip_rows);

  CSVReadOptions WithColumnTypes(
      const std::unordered_map<std::string, std::shared_ptr<DataType>> &column_types);

  /**
   * Recognized spellings for null values
   */
  CSVReadOptions NullValues(const std::vector<std::string> &null_value);

  /**
   * Recognized spellings for boolean true values
   */
  CSVReadOptions TrueValues(const std::vector<std::string> &true_values);

  /**
   * Recognized spellings for boolean false values
   */
  CSVReadOptions FalseValues(const std::vector<std::string> &false_values);
  /**
   * Whether string / binary columns can have null values.
   * If true, then strings in "null_values" are considered null for string columns.
   * If false, then all strings are valid string values.
   */
  CSVReadOptions StringsCanBeNull();

  /**
   * If non-empty, indicates the names of columns from the CSV file that should
   * be actually read and converted (in the vector's order).
   * Columns not in this vector will be ignored.
   */
  CSVReadOptions IncludeColumns(const std::vector<std::string> &include_columns);

  /** If false, columns in `include_columns` but not in the CSV file will error out.
   * If true, columns in `include_columns` but not in the CSV file will produce
   * a column of nulls (whose type is selected using `column_types`,
   * or null by default)
   * This option is ignored if `include_columns` is empty.
   */
  CSVReadOptions IncludeMissingColumns();

  std::shared_ptr<void> GetHolder() const;
};

}  // namespace config
}  // namespace io
}  // namespace cylon
#endif  // CYLON_SRC_CYLON_IO_CSV_READ_CONFIG_HPP_
